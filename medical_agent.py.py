# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M46OsVaZcS9uUQqx9C2t2IAulPtvUwQa
"""


from transformers import pipeline

sentiment_pipeline = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english")

def analyze_sentiment(text):
    """Analyzes the sentiment of the given text."""
    result = sentiment_pipeline(text)[0]
    return result['label'], result['score'] # Returns 'POSITIVE' or 'NEGATIVE', and the confidence score

import google.generativeai as genai
import os

# Configure the Gemini API
GOOGLE_API_KEY = "AIzaSyDq4f0donaT8xS8SRl82MLiM3bkVPwgGmQ"  # Replace YOUR_API_KEY with your actual API key


genai.configure(api_key=GOOGLE_API_KEY)

def generate_personalized_response(symptoms, emotion, sentiment_label, sentiment_score):
    """Generates a personalized response using the LLM."""

    model = genai.GenerativeModel('gemini-pro')

    prompt = f"""You are an empathetic and helpful AI assistant designed to provide medical advice and support to patients.
    A patient is experiencing the following symptoms: {symptoms}.
    Their emotional state is described as: {emotion}. The sentiment analysis indicates {sentiment_label} with a score of {sentiment_score:.2f}.

    Provide a response that:
    1. Acknowledges their emotions.
    2. Offers potential explanations for their symptoms, but emphasize this is not a diagnosis.
    3. Suggests actionable steps they can take (e.g., relaxation techniques, over-the-counter medications, when to see a doctor).
    4. Uses empathetic and supportive language.

    Keep your response concise and easy to understand. Do not provide overly technical details.
    """

    response = model.generate_content(prompt)
    return response.text

!pip install streamlit
import streamlit as st # Import the streamlit library and assign it to the alias 'st'

st.title("Personalized AI Medical Assistant")

symptoms = st.text_area("Please describe your symptoms:")
emotion = st.text_area("Please describe how you are feeling emotionally:")

if st.button("Get Advice"):
    if symptoms and emotion:
        sentiment_label, sentiment_score = analyze_sentiment(emotion)
        response = generate_personalized_response(symptoms, emotion, sentiment_label, sentiment_score)
        st.write(response)
    else:
        st.warning("Please enter both your symptoms and your emotional state.")

!pip install streamlit transformers google-generativeai
!pip install pyngrok

from pyngrok import ngrok

# Replace with your ngrok authtoken
NGROK_AUTH_TOKEN = "2tFqXReRTN2i11ryrzOxRpU8WPe_2GLvAz1h6FU9jjHqryBUC"

if not NGROK_AUTH_TOKEN or NGROK_AUTH_TOKEN == "YOUR_NGROK_AUTH_TOKEN":
    st.error("Please enter your ngrok authtoken in the code.")
    st.stop()

ngrok.set_auth_token(NGROK_AUTH_TOKEN)

# Terminate any existing ngrok processes
ngrok.kill()

# Open a ngrok tunnel to the Streamlit app on port 8501
public_url = ngrok.connect(8501).public_url
print(f"Streamlit app available at: {public_url}")

!lsof -i :8501

#@title 1. Install Dependencies
!pip install streamlit transformers google-generativeai
!pip install pyngrok

#@title 2.  Code (Replace API Key!)
import streamlit as st
from transformers import pipeline
import google.generativeai as genai
import os
import time  # Import the time module

# **IMPORTANT: Replace "YOUR_API_KEY" with your actual Gemini API key!**
GOOGLE_API_KEY = "AIzaSyDq4f0donaT8xS8SRl82MLiM3bkVPwgGmQ"  # Hardcoding for Colab demo.  DON'T DO THIS IN PRODUCTION!
os.environ["GOOGLE_API_KEY"] = GOOGLE_API_KEY # Set the environment variable for genai

# Check if the API Key is set
if not GOOGLE_API_KEY or GOOGLE_API_KEY == "YOUR_API_KEY":
    st.error("Please enter your Gemini API key in the code.")
    st.stop()  # Stop execution if the API key is not provided.

# Configure the Gemini API (only runs if API key is valid)
genai.configure(api_key=GOOGLE_API_KEY)


# Sentiment Analysis Pipeline
sentiment_pipeline = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english")

def analyze_sentiment(text):
    """Analyzes the sentiment of the given text."""
    result = sentiment_pipeline(text)[0]
    return result['label'], result['score']

def generate_personalized_response(symptoms, emotion, sentiment_label, sentiment_score):
    """Generates a personalized response using the LLM."""
    model = genai.GenerativeModel('gemini-pro')

    prompt = f"""You are an empathetic and helpful AI assistant designed to provide medical advice and support to patients.
    A patient is experiencing the following symptoms: {symptoms}.
    Their emotional state is described as: {emotion}. The sentiment analysis indicates {sentiment_label} with a score of {sentiment_score:.2f}.

    Provide a response that:
    1. Acknowledges their emotions.
    2. Offers potential explanations for their symptoms, but emphasize this is not a diagnosis.
    3. Suggests actionable steps they can take (e.g., relaxation techniques, over-the-counter medications, when to see a doctor).
    4. Uses empathetic and supportive language.

    Keep your response concise and easy to understand. Do not provide overly technical details.
    """

    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"An error occurred while generating the response: {e}"

# Streamlit App
st.title("Personalized AI Medical Assistant")

symptoms = st.text_area("Please describe your symptoms:")
emotion = st.text_area("Please describe how you are feeling emotionally:")

if st.button("Get Advice"):
    if symptoms and emotion:
        sentiment_label, sentiment_score = analyze_sentiment(emotion)
        response = generate_personalized_response(symptoms, emotion, sentiment_label, sentiment_score)
        st.write(response)
    else:
        st.warning("Please enter both your symptoms and your emotional state.")

#@title 3. Run ngrok (Replace Authtoken!)
from pyngrok import ngrok

# Replace with your ngrok authtoken
NGROK_AUTH_TOKEN = "2tFqXReRTN2i11ryrzOxRpU8WPe_2GLvAz1h6FU9jjHqryBUC"

if not NGROK_AUTH_TOKEN or NGROK_AUTH_TOKEN == "YOUR_NGROK_AUTH_TOKEN":
    st.error("Please enter your ngrok authtoken in the code.")
    st.stop()

ngrok.set_auth_token(NGROK_AUTH_TOKEN)

# Terminate any existing ngrok processes
ngrok.kill()

# Open a ngrok tunnel to the Streamlit app on port 8501
# Run Streamlit in the background and capture the output
get_ipython().system_raw(
    'streamlit run /content/medical_agent.py &>/content/logs.txt &'
)

# Wait for a few seconds to allow Streamlit to start
time.sleep(5)

public_url = ngrok.connect(8501).public_url
print(f"Streamlit app available at: {public_url}")
